{"version":3,"file":"background.js","mappingssources":["webpack://QuickFill/./src/background/background.ts"],"sourcesContent":["var activeTimers = [];\nvar data = {};\nvar flag = false;\nvar contextTitle = \"Enable Suggestion\";\nvar tabToggleStates = {};\nvar tabId;\n// Function to set global variables and save them to local storage\nconst setGlobalVariables = () => {\n    chrome.storage.local.set({\n        activeTimers: activeTimers,\n        data: data,\n        flag: flag,\n        contextTitle: contextTitle,\n        tabToggleStates: tabToggleStates,\n        tabId: tabId,\n    });\n};\n// Function to retrieve global variables from local storage\nconst getGlobalVariables = () => {\n    chrome.storage.local.get([\n        \"activeTimers\",\n        \"data\",\n        \"flag\",\n        \"contextTitle\",\n        \"tabToggleStates\",\n        \"tabId\",\n    ], function (result) {\n        activeTimers = result.activeTimers || [];\n        data = result.data || {};\n        flag = result.flag || false;\n        contextTitle = result.contextTitle || \"Enable Suggestion\";\n        tabToggleStates = result.tabToggleStates || {};\n        tabId = result.tabId;\n    });\n};\n// Call getGlobalVariables to initialize global variables from local storage\ngetGlobalVariables();\n// Function to update local storage whenever global variables are modified\nconst updateLocalStorage = () => {\n    setGlobalVariables();\n};\nchrome.storage.onChanged.addListener(function (changes, namespace) {\n    chrome.storage.local.get(\"myData\", function (result) {\n        data = result.myData;\n        setGlobalVariables();\n    });\n});\nchrome.tabs.onUpdated.addListener(function (Id, changeInfo, tab) {\n    if (changeInfo.status === \"complete\") {\n        chrome.storage.local.get(\"myData\", function (result) {\n            data = result.myData;\n            setGlobalVariables();\n            if (tabToggleStates[tabId]) {\n                addContentScript();\n            }\n        });\n    }\n});\nconst addContentScript = () => {\n    chrome.scripting.executeScript({\n        target: { tabId: tabId, allFrames: true },\n        files: [\"content.js\"],\n    }, () => {\n        chrome.tabs.sendMessage(tabId, { suggestions: data }, { frameId: 0 });\n    });\n};\nconst removeContentScript = () => {\n    chrome.tabs.sendMessage(tabId, { removeContentScript: true }, { frameId: 0 }, function () { });\n};\nconst toggleSuggestion = () => {\n    flag = !tabToggleStates[tabId];\n    const contextTitle = flag ? \"Disable Suggestion\" : \"Enable Suggestion\";\n    chrome.contextMenus.update(\"suggestion-toggle\", { title: contextTitle });\n    // Update tab toggle state\n    tabToggleStates[tabId] = flag;\n    setGlobalVariables();\n    if (flag) {\n        addContentScript();\n    }\n    else {\n        removeContentScript();\n    }\n};\nchrome.contextMenus.removeAll(function () {\n    chrome.contextMenus.create({\n        id: \"suggestion-toggle\",\n        title: \"Suggestions  (CMD/CTRL+SHIFT+K)\",\n        contexts: [\"all\"],\n    });\n});\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n    if (request.stopSuggestion) {\n        removeContentScript();\n    }\n});\nchrome.tabs.onActivated.addListener(function (activeInfo) {\n    tabId = activeInfo.tabId;\n    if (!(tabId in tabToggleStates)) {\n        tabToggleStates[tabId] = false;\n    }\n    const contextTitle = tabToggleStates[tabId]\n        ? \"Disable Suggestion\"\n        : \"Enable Suggestion\";\n    setGlobalVariables();\n    chrome.contextMenus.update(\"suggestion-toggle\", { title: contextTitle });\n});\n// QuickFill premium feature\nconst autoFill = () => {\n    chrome.scripting.executeScript({\n        target: { tabId: tabId, allFrames: true },\n        files: [\"content.js\"],\n    }, () => {\n        chrome.tabs.sendMessage(tabId, { quickfill: data }, { frameId: 0 });\n    });\n};\nchrome.contextMenus.removeAll(function () {\n    chrome.contextMenus.create({\n        id: \"automate\",\n        title: \"AutoFill     (CMD/CTRL+SHIFT+L)\",\n        contexts: [\"all\"],\n    });\n});\n//SHOW PASSWROD CONNTEXT\nconst showPassword = () => {\n    chrome.scripting.executeScript({\n        target: { tabId: tabId, allFrames: true },\n        files: [\"content.js\"],\n    }, () => {\n        chrome.tabs.sendMessage(tabId, { showPassword: data }, { frameId: 0 });\n    });\n};\nchrome.contextMenus.removeAll(function () {\n    chrome.contextMenus.create({\n        id: \"automate\",\n        title: \"AutoFill     (CMD/CTRL+SHIFT+L)\",\n        contexts: [\"all\"],\n    });\n});\n//SWTICH CONTEXT MMENU AND ON COMMAND\nchrome.contextMenus.onClicked.addListener(function (info, tab) {\n    if (tab) {\n        if (info.menuItemId === \"suggestion-toggle\") {\n            toggleSuggestion();\n        }\n        if (info.menuItemId === \"automate\") {\n            autoFill();\n        }\n        if (info.menuItemId === \"showPassword\") {\n            showPassword();\n        }\n    }\n});\nchrome.commands.onCommand.addListener(function (command) {\n    if (command === \"toggleSuggestion\") {\n        toggleSuggestion();\n    }\n    else if (command === \"autoFill\") {\n        autoFill();\n    }\n    else if (command === \"showPassword\") {\n        showPassword();\n    }\n});\n"],"names":[],"sourceRoot":""}